on:
  push:
    branches: [main]
  pull_request:
  workflow_dispatch:
    inputs:
      release:
        type: boolean
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}-${{ github.event.inputs.release }}
  cancel-in-progress: true
name: Windows
jobs:
  msys2:
    name: "Windows Builder"
    strategy:
      matrix:
        variant:
          - arch: x86_64
            runner: windows-latest
            sys: mingw64
            package: x86_64
          - arch: aarch64
            runner: windows-11-arm
            sys: CLANGARM64
            package: clang-aarch64
      # Don't fail the whole workflow if one architecture fails
      fail-fast: false
    runs-on: ${{ matrix.variant.runner }}
    # if: ${{ false }}
    defaults:
      run:
        shell: msys2 {0}
    steps:
      - uses: actions/checkout@v3
        with:
          lfs: 'true'
      - uses: msys2/setup-msys2@v2
        with:
          msystem: ${{ matrix.variant.sys }}
          update: true
          install: git make zip wget unzip mingw-w64-${{ matrix.variant.package }}-meson mingw-w64-${{ matrix.variant.package }}-gcc mingw-w64-${{ matrix.variant.package }}-vala mingw-w64-${{ matrix.variant.package }}-libsoup3 mingw-w64-${{ matrix.variant.package }}-libxml2 mingw-w64-${{ matrix.variant.package }}-gtksourceview5 mingw-w64-${{ matrix.variant.package }}-webp-pixbuf-loader mingw-w64-${{ matrix.variant.package }}-libadwaita mingw-w64-${{ matrix.variant.package }}-libgee mingw-w64-${{ matrix.variant.package }}-json-glib mingw-w64-${{ matrix.variant.package }}-libsecret mingw-w64-${{ matrix.variant.package }}-desktop-file-utils mingw-w64-${{ matrix.variant.package }}-imagemagick mingw-w64-${{ matrix.variant.package }}-icu mingw-w64-${{ matrix.variant.package }}-libspelling mingw-w64-${{ matrix.variant.package }}-gstreamer mingw-w64-${{ matrix.variant.package }}-gst-plugins-base mingw-w64-${{ matrix.variant.package }}-gst-plugins-good mingw-w64-${{ matrix.variant.package }}-gexiv2 mingw-w64-x86_64-nsis
      - run: make windows ${{ (inputs.release && 'release=1') || '' }} ${{ (matrix.variant.arch == 'aarch64' && 'msys_sys=clangarm64') || '' }}
      - uses: actions/upload-artifact@v4
        if: matrix.variant.arch == 'x86_64' # let's not break nightly links
        with:
          name: tuba_windows_portable
          path: tuba_windows_portable/
      - uses: actions/upload-artifact@v4
        if: matrix.variant.arch != 'x86_64'
        with:
          name: tuba_windows_portable_${{ matrix.variant.arch }}
          path: tuba_windows_portable/
      # NSIS is not available on arm
      - run: make windows_nsis ${{ (inputs.release && 'release=1') || '' }}
        if: matrix.variant.arch == 'x86_64'
      - uses: actions/upload-artifact@v4
        if: matrix.variant.arch == 'x86_64'
        with:
          name: Tuba Setup.exe
          path: nsis/Tuba Setup.exe
      - run: sha256sum nsis/Tuba\ Setup.exe
        if: matrix.variant.arch == 'x86_64'
